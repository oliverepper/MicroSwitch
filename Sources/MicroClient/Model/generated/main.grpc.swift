//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: main.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import SwiftProtobuf


///
/// ServerInfo Service
///
/// Usage: instantiate `ServerInfoServiceClient`, then call methods of this protocol to make API calls.
internal protocol ServerInfoServiceClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: ServerInfoServiceClientInterceptorFactoryProtocol? { get }

  func info(
    _ request: Google_Protobuf_Empty,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Protobuf_Empty, ServerInfo>
}

extension ServerInfoServiceClientProtocol {
  internal var serviceName: String {
    return "ServerInfoService"
  }

  /// Unary call to info
  ///
  /// - Parameters:
  ///   - request: Request to send to info.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func info(
    _ request: Google_Protobuf_Empty,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Protobuf_Empty, ServerInfo> {
    return self.makeUnaryCall(
      path: "/ServerInfoService/info",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeinfoInterceptors() ?? []
    )
  }
}

internal protocol ServerInfoServiceClientInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when invoking 'info'.
  func makeinfoInterceptors() -> [ClientInterceptor<Google_Protobuf_Empty, ServerInfo>]
}

internal final class ServerInfoServiceClient: ServerInfoServiceClientProtocol {
  internal let channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: ServerInfoServiceClientInterceptorFactoryProtocol?

  /// Creates a client for the ServerInfoService service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: ServerInfoServiceClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

///
/// PushService
///
/// Usage: instantiate `PushServiceClient`, then call methods of this protocol to make API calls.
internal protocol PushServiceClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: PushServiceClientInterceptorFactoryProtocol? { get }

  func add(
    _ request: TokenRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<TokenRequest, Google_Protobuf_Empty>

  func invite(
    _ request: InvitationRequest,
    callOptions: CallOptions?,
    handler: @escaping (InvitationResponse) -> Void
  ) -> ServerStreamingCall<InvitationRequest, InvitationResponse>
}

extension PushServiceClientProtocol {
  internal var serviceName: String {
    return "PushService"
  }

  /// Unary call to add
  ///
  /// - Parameters:
  ///   - request: Request to send to add.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func add(
    _ request: TokenRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<TokenRequest, Google_Protobuf_Empty> {
    return self.makeUnaryCall(
      path: "/PushService/add",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeaddInterceptors() ?? []
    )
  }

  /// Server streaming call to invite
  ///
  /// - Parameters:
  ///   - request: Request to send to invite.
  ///   - callOptions: Call options.
  ///   - handler: A closure called when each response is received from the server.
  /// - Returns: A `ServerStreamingCall` with futures for the metadata and status.
  internal func invite(
    _ request: InvitationRequest,
    callOptions: CallOptions? = nil,
    handler: @escaping (InvitationResponse) -> Void
  ) -> ServerStreamingCall<InvitationRequest, InvitationResponse> {
    return self.makeServerStreamingCall(
      path: "/PushService/invite",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeinviteInterceptors() ?? [],
      handler: handler
    )
  }
}

internal protocol PushServiceClientInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when invoking 'add'.
  func makeaddInterceptors() -> [ClientInterceptor<TokenRequest, Google_Protobuf_Empty>]

  /// - Returns: Interceptors to use when invoking 'invite'.
  func makeinviteInterceptors() -> [ClientInterceptor<InvitationRequest, InvitationResponse>]
}

internal final class PushServiceClient: PushServiceClientProtocol {
  internal let channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: PushServiceClientInterceptorFactoryProtocol?

  /// Creates a client for the PushService service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: PushServiceClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

///
/// AddressBook Service
///
/// Usage: instantiate `AddressBookServiceClient`, then call methods of this protocol to make API calls.
internal protocol AddressBookServiceClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: AddressBookServiceClientInterceptorFactoryProtocol? { get }

  func list(
    _ request: Google_Protobuf_Empty,
    callOptions: CallOptions?,
    handler: @escaping (Handle) -> Void
  ) -> ServerStreamingCall<Google_Protobuf_Empty, Handle>
}

extension AddressBookServiceClientProtocol {
  internal var serviceName: String {
    return "AddressBookService"
  }

  /// Server streaming call to list
  ///
  /// - Parameters:
  ///   - request: Request to send to list.
  ///   - callOptions: Call options.
  ///   - handler: A closure called when each response is received from the server.
  /// - Returns: A `ServerStreamingCall` with futures for the metadata and status.
  internal func list(
    _ request: Google_Protobuf_Empty,
    callOptions: CallOptions? = nil,
    handler: @escaping (Handle) -> Void
  ) -> ServerStreamingCall<Google_Protobuf_Empty, Handle> {
    return self.makeServerStreamingCall(
      path: "/AddressBookService/list",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makelistInterceptors() ?? [],
      handler: handler
    )
  }
}

internal protocol AddressBookServiceClientInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when invoking 'list'.
  func makelistInterceptors() -> [ClientInterceptor<Google_Protobuf_Empty, Handle>]
}

internal final class AddressBookServiceClient: AddressBookServiceClientProtocol {
  internal let channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: AddressBookServiceClientInterceptorFactoryProtocol?

  /// Creates a client for the AddressBookService service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: AddressBookServiceClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

///
/// Signal Service
///
/// Usage: instantiate `SignalServiceClient`, then call methods of this protocol to make API calls.
internal protocol SignalServiceClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: SignalServiceClientInterceptorFactoryProtocol? { get }

  func signal(
    callOptions: CallOptions?,
    handler: @escaping (Signal) -> Void
  ) -> BidirectionalStreamingCall<Signal, Signal>
}

extension SignalServiceClientProtocol {
  internal var serviceName: String {
    return "SignalService"
  }

  /// Bidirectional streaming call to signal
  ///
  /// Callers should use the `send` method on the returned object to send messages
  /// to the server. The caller should send an `.end` after the final message has been sent.
  ///
  /// - Parameters:
  ///   - callOptions: Call options.
  ///   - handler: A closure called when each response is received from the server.
  /// - Returns: A `ClientStreamingCall` with futures for the metadata and status.
  internal func signal(
    callOptions: CallOptions? = nil,
    handler: @escaping (Signal) -> Void
  ) -> BidirectionalStreamingCall<Signal, Signal> {
    return self.makeBidirectionalStreamingCall(
      path: "/SignalService/signal",
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makesignalInterceptors() ?? [],
      handler: handler
    )
  }
}

internal protocol SignalServiceClientInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when invoking 'signal'.
  func makesignalInterceptors() -> [ClientInterceptor<Signal, Signal>]
}

internal final class SignalServiceClient: SignalServiceClientProtocol {
  internal let channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: SignalServiceClientInterceptorFactoryProtocol?

  /// Creates a client for the SignalService service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: SignalServiceClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

